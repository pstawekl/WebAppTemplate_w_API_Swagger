/* tslint:disable */
/* eslint-disable */
/**
 * Tank Measurement API
 * API for config.json in tank_measurement
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Information,
    InformationFromJSON,
    InformationToJSON,
    ModelObject,
    ModelObjectFromJSON,
    ModelObjectToJSON,
} from '../models';

export interface CreateObjectRequest {
    modelObject?: ModelObject;
}

export interface DeleteObjectRequest {
    objectId: string;
}

export interface EditObjectRequest {
    objectId: string;
    modelObject?: ModelObject;
}

export interface GetObjectRequest {
    objectId: string;
}

/**
 * 
 */
export class ObjectApi extends runtime.BaseAPI {

    /**
     * Create a object
     * Create a object
     */
    async createObjectRaw(requestParameters: CreateObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Information>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/object`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelObjectToJSON(requestParameters.modelObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InformationFromJSON(jsonValue));
    }

    /**
     * Create a object
     * Create a object
     */
    async createObject(requestParameters: CreateObjectRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Information> {
        const response = await this.createObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Object object
     * Delete Object
     */
    async deleteObjectRaw(requestParameters: DeleteObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Information>> {
        if (requestParameters.objectId === null || requestParameters.objectId === undefined) {
            throw new runtime.RequiredError('objectId','Required parameter requestParameters.objectId was null or undefined when calling deleteObject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/object/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters.objectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InformationFromJSON(jsonValue));
    }

    /**
     * Delete Object object
     * Delete Object
     */
    async deleteObject(requestParameters: DeleteObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Information> {
        const response = await this.deleteObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit object
     * Edit object
     */
    async editObjectRaw(requestParameters: EditObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Information>> {
        if (requestParameters.objectId === null || requestParameters.objectId === undefined) {
            throw new runtime.RequiredError('objectId','Required parameter requestParameters.objectId was null or undefined when calling editObject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/object/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters.objectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelObjectToJSON(requestParameters.modelObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InformationFromJSON(jsonValue));
    }

    /**
     * Edit object
     * Edit object
     */
    async editObject(requestParameters: EditObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Information> {
        const response = await this.editObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Object
     * Get Object
     */
    async getObjectRaw(requestParameters: GetObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ModelObject>> {
        if (requestParameters.objectId === null || requestParameters.objectId === undefined) {
            throw new runtime.RequiredError('objectId','Required parameter requestParameters.objectId was null or undefined when calling getObject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/object/{object_id}`.replace(`{${"object_id"}}`, encodeURIComponent(String(requestParameters.objectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelObjectFromJSON(jsonValue));
    }

    /**
     * Get the Object
     * Get Object
     */
    async getObject(requestParameters: GetObjectRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ModelObject> {
        const response = await this.getObjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of objects
     * Get objects
     */
    async getObjectsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<ModelObject>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/object`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ModelObjectFromJSON));
    }

    /**
     * Get list of objects
     * Get objects
     */
    async getObjects(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<ModelObject>> {
        const response = await this.getObjectsRaw(initOverrides);
        return await response.value();
    }

}
