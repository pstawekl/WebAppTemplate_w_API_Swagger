{"ast":null,"code":"/* tslint:disable */\n\n/* eslint-disable */\n\n/**\r\n * Project API\r\n * API for config.json in project\r\n */\nexport const BASE_PATH = \"http://127.0.0.1:8000\".replace(/\\/+$/, \"\");\nexport class Configuration {\n  constructor() {\n    let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.configuration = configuration;\n  }\n\n  set config(configuration) {\n    this.configuration = configuration;\n  }\n\n  get basePath() {\n    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n  }\n\n  get fetchApi() {\n    return this.configuration.fetchApi;\n  }\n\n  get middleware() {\n    return this.configuration.middleware || [];\n  }\n\n  get queryParamsStringify() {\n    return this.configuration.queryParamsStringify || querystring;\n  }\n\n  get username() {\n    return this.configuration.username;\n  }\n\n  get password() {\n    return this.configuration.password;\n  }\n\n  get apiKey() {\n    const apiKey = this.configuration.apiKey;\n\n    if (apiKey) {\n      return typeof apiKey === 'function' ? apiKey : () => apiKey;\n    }\n\n    return undefined;\n  }\n\n  get accessToken() {\n    const accessToken = this.configuration.accessToken;\n\n    if (accessToken) {\n      return typeof accessToken === 'function' ? accessToken : async () => accessToken;\n    }\n\n    return undefined;\n  }\n\n  get headers() {\n    return this.configuration.headers;\n  }\n\n  get credentials() {\n    return this.configuration.credentials;\n  }\n\n}\nexport const DefaultConfig = new Configuration();\n/**\r\n * This is the base class for all generated API classes.\r\n */\n\nexport class BaseAPI {\n  constructor() {\n    let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultConfig;\n    this.configuration = configuration;\n    this.middleware = void 0;\n\n    this.fetchApi = async (url, init) => {\n      let fetchParams = {\n        url,\n        init\n      };\n\n      for (const middleware of this.middleware) {\n        if (middleware.pre) {\n          fetchParams = (await middleware.pre({\n            fetch: this.fetchApi,\n            ...fetchParams\n          })) || fetchParams;\n        }\n      }\n\n      let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\n\n      for (const middleware of this.middleware) {\n        if (middleware.post) {\n          response = (await middleware.post({\n            fetch: this.fetchApi,\n            url: fetchParams.url,\n            init: fetchParams.init,\n            response: response.clone()\n          })) || response;\n        }\n      }\n\n      return response;\n    };\n\n    this.middleware = configuration.middleware;\n  }\n\n  withMiddleware() {\n    const next = this.clone();\n    next.middleware = next.middleware.concat(...arguments);\n    return next;\n  }\n\n  withPreMiddleware() {\n    for (var _len = arguments.length, preMiddlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n      preMiddlewares[_key] = arguments[_key];\n    }\n\n    const middlewares = preMiddlewares.map(pre => ({\n      pre\n    }));\n    return this.withMiddleware(...middlewares);\n  }\n\n  withPostMiddleware() {\n    for (var _len2 = arguments.length, postMiddlewares = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      postMiddlewares[_key2] = arguments[_key2];\n    }\n\n    const middlewares = postMiddlewares.map(post => ({\n      post\n    }));\n    return this.withMiddleware(...middlewares);\n  }\n\n  async request(context, initOverrides) {\n    const {\n      url,\n      init\n    } = await this.createFetchParams(context, initOverrides);\n    const response = await this.fetchApi(url, init);\n\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    throw new ResponseError(response, 'Response returned an error code');\n  }\n\n  async createFetchParams(context, initOverrides) {\n    let url = this.configuration.basePath + context.path;\n\n    if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n      // only add the querystring to the URL if there are query parameters.\n      // this is done to avoid urls ending with a \"?\" character which buggy webservers\n      // do not handle correctly sometimes.\n      url += '?' + this.configuration.queryParamsStringify(context.query);\n    }\n\n    const headers = Object.assign({}, this.configuration.headers, context.headers);\n    Object.keys(headers).forEach(key => headers[key] === undefined ? delete headers[key] : {});\n    const initOverrideFn = typeof initOverrides === \"function\" ? initOverrides : async () => initOverrides;\n    const initParams = {\n      method: context.method,\n      headers,\n      body: context.body,\n      credentials: this.configuration.credentials\n    };\n    const overridedInit = { ...initParams,\n      ...(await initOverrideFn({\n        init: initParams,\n        context\n      }))\n    };\n    const init = { ...overridedInit,\n      body: isFormData(overridedInit.body) || overridedInit.body instanceof URLSearchParams || isBlob(overridedInit.body) ? overridedInit.body : JSON.stringify(overridedInit.body)\n    };\n    return {\n      url,\n      init\n    };\n  }\n\n  /**\r\n   * Create a shallow clone of `this` by constructing a new instance\r\n   * and then shallow cloning data members.\r\n   */\n  clone() {\n    const constructor = this.constructor;\n    const next = new constructor(this.configuration);\n    next.middleware = this.middleware.slice();\n    return next;\n  }\n\n}\n;\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\nfunction isFormData(value) {\n  return typeof FormData !== \"undefined\" && value instanceof FormData;\n}\n\nexport class ResponseError extends Error {\n  constructor(response, msg) {\n    super(msg);\n    this.response = response;\n    this.name = \"ResponseError\";\n  }\n\n}\nexport class RequiredError extends Error {\n  constructor(field, msg) {\n    super(msg);\n    this.field = field;\n    this.name = \"RequiredError\";\n  }\n\n}\nexport const COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\"\n};\nexport function exists(json, key) {\n  const value = json[key];\n  return value !== null && value !== undefined;\n}\nexport function querystring(params) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return Object.keys(params).map(key => querystringSingleKey(key, params[key], prefix)).filter(part => part.length > 0).join('&');\n}\n\nfunction querystringSingleKey(key, value) {\n  let keyPrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\n\n  if (value instanceof Array) {\n    const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);\n    return `${encodeURIComponent(fullKey)}=${multiValue}`;\n  }\n\n  if (value instanceof Set) {\n    const valueAsArray = Array.from(value);\n    return querystringSingleKey(key, valueAsArray, keyPrefix);\n  }\n\n  if (value instanceof Date) {\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n  }\n\n  if (value instanceof Object) {\n    return querystring(value, fullKey);\n  }\n\n  return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n}\n\nexport function mapValues(data, fn) {\n  return Object.keys(data).reduce((acc, key) => ({ ...acc,\n    [key]: fn(data[key])\n  }), {});\n}\nexport function canConsumeForm(consumes) {\n  for (const consume of consumes) {\n    if ('multipart/form-data' === consume.contentType) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class JSONApiResponse {\n  constructor(raw) {\n    let transformer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : jsonValue => jsonValue;\n    this.raw = raw;\n    this.transformer = transformer;\n  }\n\n  async value() {\n    return this.transformer(await this.raw.json());\n  }\n\n}\nexport class VoidApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return undefined;\n  }\n\n}\nexport class BlobApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return await this.raw.blob();\n  }\n\n}\nexport class TextApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return await this.raw.text();\n  }\n\n}","map":{"version":3,"names":["BASE_PATH","replace","Configuration","constructor","configuration","config","basePath","fetchApi","middleware","queryParamsStringify","querystring","username","password","apiKey","undefined","accessToken","headers","credentials","DefaultConfig","BaseAPI","url","init","fetchParams","pre","fetch","response","post","clone","withMiddleware","next","concat","withPreMiddleware","preMiddlewares","middlewares","map","withPostMiddleware","postMiddlewares","request","context","initOverrides","createFetchParams","status","ResponseError","path","query","Object","keys","length","assign","forEach","key","initOverrideFn","initParams","method","body","overridedInit","isFormData","URLSearchParams","isBlob","JSON","stringify","slice","value","Blob","FormData","Error","msg","name","RequiredError","field","COLLECTION_FORMATS","csv","ssv","tsv","pipes","exists","json","params","prefix","querystringSingleKey","filter","part","join","keyPrefix","fullKey","Array","multiValue","singleValue","encodeURIComponent","String","Set","valueAsArray","from","Date","toISOString","mapValues","data","fn","reduce","acc","canConsumeForm","consumes","consume","contentType","JSONApiResponse","raw","transformer","jsonValue","VoidApiResponse","BlobApiResponse","blob","TextApiResponse","text"],"sources":["C:/Users/jstawski/Documents/VSC/projekt-na-studia/frontend/src/runtime.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/**\r\n * Project API\r\n * API for config.json in project\r\n */\r\n\r\n\r\nexport const BASE_PATH = \"http://127.0.0.1:8000\".replace(/\\/+$/, \"\");\r\n\r\nexport interface ConfigurationParameters {\r\n    basePath?: string; // override base path\r\n    fetchApi?: FetchAPI; // override for fetch implementation\r\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\r\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\r\n    username?: string; // parameter for basic security\r\n    password?: string; // parameter for basic security\r\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\r\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string | Promise<string>); // parameter for oauth2 security\r\n    headers?: HTTPHeaders; //header params we want to use on every request\r\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\r\n}\r\n\r\nexport class Configuration {\r\n    constructor(private configuration: ConfigurationParameters = {}) {}\r\n\r\n    set config(configuration: Configuration) {\r\n        this.configuration = configuration;\r\n    }\r\n\r\n    get basePath(): string {\r\n        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\r\n    }\r\n\r\n    get fetchApi(): FetchAPI | undefined {\r\n        return this.configuration.fetchApi;\r\n    }\r\n\r\n    get middleware(): Middleware[] {\r\n        return this.configuration.middleware || [];\r\n    }\r\n\r\n    get queryParamsStringify(): (params: HTTPQuery) => string {\r\n        return this.configuration.queryParamsStringify || querystring;\r\n    }\r\n\r\n    get username(): string | undefined {\r\n        return this.configuration.username;\r\n    }\r\n\r\n    get password(): string | undefined {\r\n        return this.configuration.password;\r\n    }\r\n\r\n    get apiKey(): ((name: string) => string) | undefined {\r\n        const apiKey = this.configuration.apiKey;\r\n        if (apiKey) {\r\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    get accessToken(): ((name?: string, scopes?: string[]) => string | Promise<string>) | undefined {\r\n        const accessToken = this.configuration.accessToken;\r\n        if (accessToken) {\r\n            return typeof accessToken === 'function' ? accessToken : async () => accessToken;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    get headers(): HTTPHeaders | undefined {\r\n        return this.configuration.headers;\r\n    }\r\n\r\n    get credentials(): RequestCredentials | undefined {\r\n        return this.configuration.credentials;\r\n    }\r\n}\r\n\r\nexport const DefaultConfig = new Configuration();\r\n\r\n/**\r\n * This is the base class for all generated API classes.\r\n */\r\nexport class BaseAPI {\r\n\r\n    private middleware: Middleware[];\r\n\r\n    constructor(protected configuration = DefaultConfig) {\r\n        this.middleware = configuration.middleware;\r\n    }\r\n\r\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\r\n        const next = this.clone<T>();\r\n        next.middleware = next.middleware.concat(...middlewares);\r\n        return next;\r\n    }\r\n\r\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\r\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\r\n        return this.withMiddleware<T>(...middlewares);\r\n    }\r\n\r\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\r\n        const middlewares = postMiddlewares.map((post) => ({ post }));\r\n        return this.withMiddleware<T>(...middlewares);\r\n    }\r\n\r\n    protected async request(context: RequestOpts, initOverrides?: RequestInit | InitOverideFunction): Promise<Response> {\r\n        const { url, init } = await this.createFetchParams(context, initOverrides);\r\n        const response = await this.fetchApi(url, init);\r\n        if (response.status >= 200 && response.status < 300) {\r\n            return response;\r\n        }\r\n        throw new ResponseError(response, 'Response returned an error code');\r\n    }\r\n\r\n    private async createFetchParams(context: RequestOpts, initOverrides?: RequestInit | InitOverideFunction) {\r\n        let url = this.configuration.basePath + context.path;\r\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\r\n            // only add the querystring to the URL if there are query parameters.\r\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\r\n            // do not handle correctly sometimes.\r\n            url += '?' + this.configuration.queryParamsStringify(context.query);\r\n        }\r\n\r\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\r\n        Object.keys(headers).forEach(key => headers[key] === undefined ? delete headers[key] : {});\r\n\r\n        const initOverrideFn =\r\n            typeof initOverrides === \"function\"\r\n                ? initOverrides\r\n                : async () => initOverrides;\r\n\r\n        const initParams = {\r\n            method: context.method,\r\n            headers,\r\n            body: context.body,\r\n            credentials: this.configuration.credentials,\r\n        };\r\n\r\n        const overridedInit: RequestInit = {\r\n            ...initParams,\r\n            ...(await initOverrideFn({\r\n                init: initParams,\r\n                context,\r\n            }))\r\n        }\r\n\r\n        const init: RequestInit = {\r\n            ...overridedInit,\r\n            body:\r\n                isFormData(overridedInit.body) ||\r\n                overridedInit.body instanceof URLSearchParams ||\r\n                isBlob(overridedInit.body)\r\n                    ? overridedInit.body\r\n                    : JSON.stringify(overridedInit.body),\r\n        };\r\n\r\n        return { url, init };\r\n    }\r\n\r\n    private fetchApi = async (url: string, init: RequestInit) => {\r\n        let fetchParams = { url, init };\r\n        for (const middleware of this.middleware) {\r\n            if (middleware.pre) {\r\n                fetchParams = await middleware.pre({\r\n                    fetch: this.fetchApi,\r\n                    ...fetchParams,\r\n                }) || fetchParams;\r\n            }\r\n        }\r\n        let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\r\n        for (const middleware of this.middleware) {\r\n            if (middleware.post) {\r\n                response = await middleware.post({\r\n                    fetch: this.fetchApi,\r\n                    url: fetchParams.url,\r\n                    init: fetchParams.init,\r\n                    response: response.clone(),\r\n                }) || response;\r\n            }\r\n        }\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Create a shallow clone of `this` by constructing a new instance\r\n     * and then shallow cloning data members.\r\n     */\r\n    private clone<T extends BaseAPI>(this: T): T {\r\n        const constructor = this.constructor as any;\r\n        const next = new constructor(this.configuration);\r\n        next.middleware = this.middleware.slice();\r\n        return next;\r\n    }\r\n};\r\n\r\nfunction isBlob(value: any): value is Blob {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob\r\n}\r\n\r\nfunction isFormData(value: any): value is FormData {\r\n    return typeof FormData !== \"undefined\" && value instanceof FormData\r\n}\r\n\r\nexport class ResponseError extends Error {\r\n    name: \"ResponseError\" = \"ResponseError\";\r\n    constructor(public response: Response, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n\r\nexport class RequiredError extends Error {\r\n    name: \"RequiredError\" = \"RequiredError\";\r\n    constructor(public field: string, msg?: string) {\r\n        super(msg);\r\n    }\r\n}\r\n\r\nexport const COLLECTION_FORMATS = {\r\n    csv: \",\",\r\n    ssv: \" \",\r\n    tsv: \"\\t\",\r\n    pipes: \"|\",\r\n};\r\n\r\nexport type FetchAPI = WindowOrWorkerGlobalScope['fetch'];\r\n\r\nexport type Json = any;\r\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\r\nexport type HTTPHeaders = { [key: string]: string };\r\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery };\r\nexport type HTTPBody = Json | FormData | URLSearchParams;\r\nexport type HTTPRequestInit = { headers?: HTTPHeaders; method: HTTPMethod; credentials?: RequestCredentials; body?: HTTPBody }\r\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\r\n\r\nexport type InitOverideFunction = (requestContext: { init: HTTPRequestInit, context: RequestOpts }) => Promise<RequestInit>\r\n\r\nexport interface FetchParams {\r\n    url: string;\r\n    init: RequestInit;\r\n}\r\n\r\nexport interface RequestOpts {\r\n    path: string;\r\n    method: HTTPMethod;\r\n    headers: HTTPHeaders;\r\n    query?: HTTPQuery;\r\n    body?: HTTPBody;\r\n}\r\n\r\nexport function exists(json: any, key: string) {\r\n    const value = json[key];\r\n    return value !== null && value !== undefined;\r\n}\r\n\r\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\r\n    return Object.keys(params)\r\n        .map(key => querystringSingleKey(key, params[key], prefix))\r\n        .filter(part => part.length > 0)\r\n        .join('&');\r\n}\r\n\r\nfunction querystringSingleKey(key: string, value: string | number | null | boolean | Array<string | number | null | boolean> | Set<string | number | null | boolean> | HTTPQuery, keyPrefix: string = ''): string {\r\n    const fullKey = keyPrefix + (keyPrefix.length ? `[${key}]` : key);\r\n    if (value instanceof Array) {\r\n        const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\r\n            .join(`&${encodeURIComponent(fullKey)}=`);\r\n        return `${encodeURIComponent(fullKey)}=${multiValue}`;\r\n    }\r\n    if (value instanceof Set) {\r\n        const valueAsArray = Array.from(value);\r\n        return querystringSingleKey(key, valueAsArray, keyPrefix);\r\n    }\r\n    if (value instanceof Date) {\r\n        return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\r\n    }\r\n    if (value instanceof Object) {\r\n        return querystring(value as HTTPQuery, fullKey);\r\n    }\r\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\r\n}\r\n\r\nexport function mapValues(data: any, fn: (item: any) => any) {\r\n  return Object.keys(data).reduce(\r\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\r\n    {}\r\n  );\r\n}\r\n\r\nexport function canConsumeForm(consumes: Consume[]): boolean {\r\n    for (const consume of consumes) {\r\n        if ('multipart/form-data' === consume.contentType) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport interface Consume {\r\n    contentType: string\r\n}\r\n\r\nexport interface RequestContext {\r\n    fetch: FetchAPI;\r\n    url: string;\r\n    init: RequestInit;\r\n}\r\n\r\nexport interface ResponseContext {\r\n    fetch: FetchAPI;\r\n    url: string;\r\n    init: RequestInit;\r\n    response: Response;\r\n}\r\n\r\nexport interface Middleware {\r\n    pre?(context: RequestContext): Promise<FetchParams | void>;\r\n    post?(context: ResponseContext): Promise<Response | void>;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n    raw: Response;\r\n    value(): Promise<T>;\r\n}\r\n\r\nexport interface ResponseTransformer<T> {\r\n    (json: any): T;\r\n}\r\n\r\nexport class JSONApiResponse<T> {\r\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\r\n\r\n    async value(): Promise<T> {\r\n        return this.transformer(await this.raw.json());\r\n    }\r\n}\r\n\r\nexport class VoidApiResponse {\r\n    constructor(public raw: Response) {}\r\n\r\n    async value(): Promise<void> {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport class BlobApiResponse {\r\n    constructor(public raw: Response) {}\r\n\r\n    async value(): Promise<Blob> {\r\n        return await this.raw.blob();\r\n    };\r\n}\r\n\r\nexport class TextApiResponse {\r\n    constructor(public raw: Response) {}\r\n\r\n    async value(): Promise<string> {\r\n        return await this.raw.text();\r\n    };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}